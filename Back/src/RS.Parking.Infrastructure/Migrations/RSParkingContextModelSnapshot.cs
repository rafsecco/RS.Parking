// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RS.Parking.Infrastructure;

#nullable disable

namespace RS.Parking.Infrastructure.Migrations
{
    [DbContext(typeof(RSParkingContext))]
    partial class RSParkingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("RS.Parking")
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RS.Parking.Domain.Models.AccordType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasColumnName("id_accord");

                    b.Property<ushort>("Accord")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("ie_accord");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bln_active");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dt_dateCreated")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ds_accord");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("nr_percentage");

                    b.HasKey("Id");

                    b.ToTable("tb_AccordType", "RS.Parking");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Accord = (ushort)0,
                            Active = true,
                            DateCreated = new DateTime(2022, 11, 12, 9, 1, 57, 438, DateTimeKind.Local).AddTicks(9929),
                            Description = "PharmaTech",
                            Percentage = 0m
                        },
                        new
                        {
                            Id = (byte)2,
                            Accord = (ushort)1,
                            Active = true,
                            DateCreated = new DateTime(2022, 11, 12, 9, 1, 57, 438, DateTimeKind.Local).AddTicks(9932),
                            Description = "Subway",
                            Percentage = 50.0m
                        },
                        new
                        {
                            Id = (byte)3,
                            Accord = (ushort)2,
                            Active = true,
                            DateCreated = new DateTime(2022, 11, 12, 9, 1, 57, 438, DateTimeKind.Local).AddTicks(9935),
                            Description = "McDonald's",
                            Percentage = 100m
                        });
                });

            modelBuilder.Entity("RS.Parking.Domain.Models.ControlInOut", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT UNSIGNED")
                        .HasColumnName("id_controlInOut");

                    b.Property<byte?>("AccordTypeId")
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasColumnName("cd_accord");

                    b.Property<DateTime>("DateTimeIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dt_in")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DateTimeOut")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dt_out");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("ds_licensePlate");

                    b.Property<byte>("VehicleTypeId")
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasColumnName("cd_vehicle");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DateTimeOut" }, "idx_tb_ControleInOut_dt_out");

                    b.ToTable("tb_ControlInOut", "RS.Parking");

                    b.HasData(
                        new
                        {
                            Id = 1ul,
                            DateTimeIn = new DateTime(2022, 11, 12, 9, 1, 57, 439, DateTimeKind.Local).AddTicks(2670),
                            LicensePlate = "BRL-123",
                            VehicleTypeId = (byte)1
                        },
                        new
                        {
                            Id = 2ul,
                            DateTimeIn = new DateTime(2022, 11, 12, 9, 1, 57, 439, DateTimeKind.Local).AddTicks(2673),
                            LicensePlate = "BRL-456",
                            VehicleTypeId = (byte)2
                        });
                });

            modelBuilder.Entity("RS.Parking.Domain.Models.VehicleType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasColumnName("id_vehicle");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bln_active");

                    b.Property<decimal>("Cost")
                        .IsConcurrencyToken()
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("vl_cost");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dt_dateCreated")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ds_vehicle");

                    b.HasKey("Id");

                    b.ToTable("tb_VehicleType", "RS.Parking");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Active = true,
                            Cost = 5m,
                            DateCreated = new DateTime(2022, 11, 12, 9, 1, 57, 439, DateTimeKind.Local).AddTicks(3809),
                            Description = "Car 1"
                        },
                        new
                        {
                            Id = (byte)2,
                            Active = true,
                            Cost = 5.5m,
                            DateCreated = new DateTime(2022, 11, 12, 9, 1, 57, 439, DateTimeKind.Local).AddTicks(3811),
                            Description = "Car 2"
                        },
                        new
                        {
                            Id = (byte)3,
                            Active = true,
                            Cost = 3m,
                            DateCreated = new DateTime(2022, 11, 12, 9, 1, 57, 439, DateTimeKind.Local).AddTicks(3813),
                            Description = "Moto 1"
                        },
                        new
                        {
                            Id = (byte)4,
                            Active = true,
                            Cost = 3.5m,
                            DateCreated = new DateTime(2022, 11, 12, 9, 1, 57, 439, DateTimeKind.Local).AddTicks(3814),
                            Description = "Moto 2"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
