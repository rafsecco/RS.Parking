// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RS.Parking.Infrastructure;

#nullable disable

namespace RS.Parking.Infrastructure.Migrations
{
    [DbContext(typeof(RSParkingContext))]
    partial class RSParkingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("RS.Parking")
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("RS.Parking.Domain.Models.AccordType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasColumnName("id_accord");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bln_active");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dt_dateCreated")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("ds_accord");

                    b.Property<ushort>("DiscountTypeId")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("ie_accord");

                    b.Property<double>("Percentage")
                        .HasPrecision(3, 2)
                        .HasColumnType("double")
                        .HasColumnName("nr_percentage");

                    b.HasKey("Id");

                    b.ToTable("tb_AccordType", "RS.Parking");
                });

            modelBuilder.Entity("RS.Parking.Domain.Models.ControlInOut", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT UNSIGNED")
                        .HasColumnName("id_controlInOut")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<ulong>("Id"));

                    b.Property<byte>("AccordTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("cd_accord")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DateTimeIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dt_in")
                        .HasColumnOrder(4)
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DateTimeOut")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dt_out")
                        .HasColumnOrder(5);

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("ds_licensePlate")
                        .HasColumnOrder(6);

                    b.Property<byte>("VehicleTypeId")
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasColumnName("cd_vehicle")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AccordTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.HasIndex(new[] { "DateTimeIn", "DateTimeOut" }, "idx_tb_ControleInOut-dt_in_dt_out");

                    b.ToTable("tb_ControlInOut", "RS.Parking");
                });

            modelBuilder.Entity("RS.Parking.Domain.Models.VehicleType", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT UNSIGNED")
                        .HasColumnName("id_vehicle");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<byte>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bln_active");

                    b.Property<decimal>("Cost")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("vl_cost");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dt_dateCreated")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("ds_vehicle");

                    b.HasKey("Id");

                    b.ToTable("tb_VehicleType", "RS.Parking");
                });

            modelBuilder.Entity("RS.Parking.Domain.Models.ControlInOut", b =>
                {
                    b.HasOne("RS.Parking.Domain.Models.AccordType", "AccordType")
                        .WithMany()
                        .HasForeignKey("AccordTypeId")
                        .IsRequired();

                    b.HasOne("RS.Parking.Domain.Models.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .IsRequired();

                    b.Navigation("AccordType");

                    b.Navigation("VehicleType");
                });
#pragma warning restore 612, 618
        }
    }
}
